#################################################################
# _______________________________________________________
#/                                                       \
#| Sections                                              |
#|   1. Per environment config and setup (macOS/Linux)   |
#|   2. Universal alias                                  |
#|   3. Functions                                        |
#|   4. Super history (Sync version)                     |
#|   5. Autocomplete and Exports (Path, Editor, etc.)    |
#|   6. Local Config                                     |
#|   7. All done                                         |
#|                                                       |
#\ -- Bash Profile                                       /
# -------------------------------------------------------
#        \   ^__^
#         \  (oo)\_______
#            (__)\       )\/\
#                ||----w |
#                ||     ||
#################################################################


PLATFORM=$(uname -a)
ERROR_LOG_FILE="${HOME}/logs/php_error.log"


####################################################
#
#   1. Per environment config and setup
#
####################################################

if [[ $PLATFORM == *"Darwin"* ]]
then
  AUTOCOMPLETE=$(brew --prefix)/etc/bash_completion
  PROFILE_SOURCE='.bash_profile'
  eval `gdircolors ~/.dir_colors`

  alias ll='gls --color=auto -FGlAhp'
  alias shred='gshred -zvu --iterations=5 --random-source=/dev/urandom'
  alias f='open -a Finder ./'
  alias cleanupds="find . -type f -name '*.DS_Store' -ls -delete"

  alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
  alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
  alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'

  if [ -f ~/.dir_colors ]
  then
    eval `gdircolors ~/.dir_colors`
  fi
else
  AUTOCOMPLETE='/etc/bash_completion'
  PROFILE_SOURCE='.profile'

  alias ll='ls --color=auto -FGlAhp'
  alias shred='shred -zvu --iterations=5 --random-source=/dev/urandom'
  alias f='gnome-open .'

  if [ -f ~/.dir_colors ]
  then
    eval `dircolors ~/.dir_colors`
  fi
fi


####################################################
#
#   2. Universal alias
#
####################################################

alias rebash="source ~/$PROFILE_SOURCE"
alias seebash="look ~/$PROFILE_SOURCE"
alias newbash="vim ~/$PROFILE_SOURCE"
alias .1='cd ../'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias v='vim'
alias vi='vim'
alias nano='vim'
alias cc='clear'
alias locip='ifconfig | grep inet'
alias extip='curl ipecho.net/plain ; echo'
alias githome='rm ~/.gituser || true && ln -s ~/.dots/git/gituser_home ~/.gituser'
alias gitwork='rm ~/.gituser || true && ln -s ~/.dots/git/gituser_work ~/.gituser'
alias gitcheck='git config -l | grep user'
alias unixtime='date +%s'
alias notes="subl ~/Sync/Notes/"
alias apacheconfig="httpd -V | grep httpd.conf"
alias phpconfig="php -i | grep php.ini"
alias mysqlconfig="mysql --help | grep my.cnf"


####################################################
#
#   3. Functions
#
####################################################

#
# Debugging
#

newlog() {
  rm $ERROR_LOG_FILE;
  touch $ERROR_LOG_FILE;
  printf "Log Cleared\n";
}

watchlog() {
  tail -f $ERROR_LOG_FILE;
}

#
# Shortcuts
#

bak() {
  cp $1{,.bak};
}

mcd() {
  mkdir -p "$1" && cd "$1";
}

zipf() {
  zip -r "$1".zip "$1" ;
}

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)  tar xzf $1   ;;
      *.bz2)     bunzip2 $1   ;;
      *.rar)     unrar e $1   ;;
      *.gz)    gunzip $1    ;;
      *.tar)     tar xf $1    ;;
      *.tbz2)    tar xjf $1   ;;
      *.tgz)     tar xzf $1   ;;
      *.zip)     unzip $1     ;;
      *.Z)     uncompress $1  ;;
      *.7z)    7z x $1    ;;
      *)   echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

hashit(){
  echo -n "$2" | openssl $1
}

export -f newlog watchlog bak mcd zipf extract hashit


#
# Git & SVN Branch Prompt
#

parse_git_branch() {
   git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

parse_svn_branch() {
  parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk '{print " (svn::"$1")" }'
}

parse_svn_url() {
  svn info 2>/dev/null | sed -ne 's#^URL: ##p'
}

parse_svn_repository_root() {
  svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
}

export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\$(parse_svn_branch)\[\033[00m\] $ "


####################################################
#
#   4. Super history
#
####################################################


if [[ -d "${HOME}/Sync/Bash/logs" ]]
then
  CLI_LOG="${HOME}/Sync/Bash/logs"
else
  CLI_LOG="${HOME}/Sync/Work/Bash/logs"
fi

if [[ -d $CLI_LOG ]]
then
  export PROMPT_COMMAND='if [ "$(id -u)" -ne 0 ]; then echo "$(history 1)		$(date "+%Y-%m-%d.%H:%M:%S") $(pwd) " >> $CLI_LOG/$(date "+%Y-%m-%d").log; fi'

  historyall() {
    grep -C 0 "$1" ~/Sync/Bash/logs/*.log ~/Sync/Work/Bash/logs/*.log
  }

  export historyall
fi


####################################################
#
#   5. Autocomplete and Exports
#
####################################################

if [ -f $AUTOCOMPLETE ]
then
  . $AUTOCOMPLETE
fi

if [[ $PLATFORM == *"Darwin"* ]]
then
  export PATH=/usr/local/bin:/usr/local/Cellar:/usr/local/bin/mysql:~/.dots/bash/scripts:/usr/local/sbin:$PATH
else
  export PATH=~/.dots/bash/scripts:$PATH
fi

export PATH=~/go/bin:$PATH
export EDITOR=vim


####################################################
#
#   6. Local Config
#
####################################################

if [[ -e ~/.bash_profile_local ]]
then
  . ~/.bash_profile_local
fi


####################################################
#
#   7. All done
#
####################################################

echo;fortune | cowsay;echo;

alias spoon="echo 'Do not try and bend the spoon.'"
alias nospoon="echo 'It is not the spoon that bends, it is only yourself.'"
